# TPE-TADL

> Es necesario tener un entorno Python `.venv` en la raíz del proyecto, con las dependencias de `backend/requirements.txt` instaladas.
>
> Comando (Linux):
> 
> ```bash
> python3 -m venv .venv && source .venv/bin/activate && pip install -r backend/requirements.txt
> ```

Proyecto que genera briefings automáticos para reuniones, utilizando como fuentes conversaciones, documentos y métricas. 

---

## Configuración de variables de entorno

### Backend (`backend/.env`)

* `OPENAI_API_KEY`: Clave de API de OpenAI para generar texto.
* `PINECONE_API_KEY`: Clave de API de Pinecone para la base vectorial.

### Frontend (`frontend/.env`)

* `NEXT_PUBLIC_API_URL`: URL del backend. Por defecto: `http://localhost:8000`

---

## Scripts útiles

> Ejecutar estos comandos desde la raíz del proyecto o la carpeta correspondiente.

* `generate-data`: Genera datos sintéticos desde cero (elimina datos previos).
* `reset-db`: Resetea la base de datos por completo.
* `run-backend`: Levanta el backend (Flask) en el puerto **8000**.
* `run-frontend`: Inicia el frontend (Next.js) en el puerto **3000**.

---

## Acceso al Frontend

El frontend está disponible en producción aquí: [https://tpe-tadl.vercel.app/](https://tpe-tadl.vercel.app/)

Para usarlo localmente:

1. Asegúrate de que el backend esté corriendo en `http://localhost:8000`.
2. Inicia el frontend con `run-frontend`.